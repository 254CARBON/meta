# 🏆 Quality Metrics Report

**Generated:** {{ generated_at | format_date }}
**Total Services:** {{ total_services }}
**Average Score:** {{ global_avg | format_number(1) }}/100

## 📊 Executive Summary

| Metric | Value | Grade | Trend |
|--------|-------|-------|-------|
| **Platform Average** | {{ global_avg | format_number(1) }}/100 | {% if global_avg >= 90 %}A (🟢 Excellent){% elif global_avg >= 80 %}B (🟡 Good){% elif global_avg >= 70 %}C (🟢 Acceptable){% elif global_avg >= 60 %}D (🟠 Needs Work){% else %}F (🔴 Failing){% endif %} | 📈 Improving |
| **Services Passing** | {{ services | selectattr('status', 'equalto', 'passing') | list | length }}/{{ total_services }} | {% if (services | selectattr('status', 'equalto', 'passing') | list | length / total_services * 100) >= 80 %}🟢{% else %}🟡{% endif %} |
| **Critical Issues** | {{ services | selectattr('critical_vulns', 'defined') | selectattr('critical_vulns', '>', 0) | list | length }} | {% if services | selectattr('critical_vulns', 'defined') | selectattr('critical_vulns', '>', 0) | list | length == 0 %}🟢{% else %}🔴{% endif %} |

## 📈 Quality Distribution

### Grade Breakdown

| Grade | Services | Percentage | Description |
|-------|----------|------------|-------------|
| **A** (90-100) | {{ grade_distribution.A | default(0) }} | {{ ((grade_distribution.A | default(0)) / total_services * 100) | format_number(1) }}% | 🏆 Excellent |
| **B** (80-89) | {{ grade_distribution.B | default(0) }} | {{ ((grade_distribution.B | default(0)) / total_services * 100) | format_number(1) }}% | ✅ Good |
| **C** (70-79) | {{ grade_distribution.C | default(0) }} | {{ ((grade_distribution.C | default(0)) / total_services * 100) | format_number(1) }}% | ⚠️ Acceptable |
| **D** (60-69) | {{ grade_distribution.D | default(0) }} | {{ ((grade_distribution.D | default(0)) / total_services * 100) | format_number(1) }}% | 🔶 Needs Work |
| **F** (0-59) | {{ grade_distribution.F | default(0) }} | {{ ((grade_distribution.F | default(0)) / total_services * 100) | format_number(1) }}% | ❌ Failing |

## 🔍 Service Quality Rankings

### Top Performers (A Grade)

| Rank | Service | Score | Coverage | Security | Policy |
|------|---------|-------|----------|----------|--------|
{% set rank = 1 %}
{% for service in services %}
{% if service.grade == 'A' %}
| **{{ rank }}** | **{{ service.name }}** | {{ service.score | format_number(1) }} | {{ service.coverage | format_number(1) }} | {% if service.lint_pass %}✅{% else %}❌{% endif %} | {% if service.policy_pass | default(false) %}✅{% else %}❌{% endif %} |
{% set rank = rank + 1 %}
{% endif %}
{% endfor %}

### Needs Attention (D/F Grade)

| Service | Score | Grade | Primary Issues | Action Required |
|---------|-------|-------|---------------|----------------|
{% for service in services %}
{% if service.grade in ['D', 'F'] %}
| **{{ service.name }}** | {{ service.score | format_number(1) }} | {{ service.grade }} | {% if service.coverage < 0.7 %}📊 Low Coverage{% elif service.critical_vulns > 0 %}🔒 Security Issues{% elif not service.lint_pass %}🧹 Lint Failures{% else %}📋 Multiple Issues{% endif %} | 🔧 Review & Improve |
{% endif %}
{% endfor %}

## 📋 Detailed Quality Metrics

### Coverage Analysis

| Service | Coverage | Target | Status |
|---------|----------|--------|--------|
{% for service in services[:20] %}
| **{{ service.name }}** | {{ service.coverage | format_number(1) }} | {% if service.maturity == 'stable' %}80%{% elif service.maturity == 'beta' %}70%{% else %}50%{% endif %} | {% if service.coverage >= 0.8 %}🟢{% elif service.coverage >= 0.7 %}🟡{% else %}🔴{% endif %} |
{% endfor %}

### Security Status

| Service | Critical Vulns | High Vulns | Signed Images | Policy Status |
|---------|----------------|------------|---------------|---------------|
{% for service in services[:20] %}
| **{{ service.name }}** | {{ service.critical_vulns | default(0) }} | {{ service.high_vulns | default(0) }} | {% if service.signed_images | default(false) %}✅{% else %}❌{% endif %} | {% if service.policy_pass | default(false) %}✅{% else %}❌{% endif %} |
{% endfor %}

## 🎯 Quality Insights

### Strengths
{% if global_avg >= 80 %}
✅ **High Overall Quality:** Platform average of {{ global_avg | format_number(1) }}/100 indicates strong engineering practices.
{% endif %}

{% if grade_distribution.A | default(0) > 0 %}
✅ **Excellence Achieved:** {{ grade_distribution.A | default(0) }} services demonstrate exceptional quality standards.
{% endif %}

{% if services | selectattr('critical_vulns', 'equalto', 0) | list | length == total_services %}
✅ **Security Clean:** No critical vulnerabilities across the platform.
{% endif %}

### Areas for Improvement
{% if grade_distribution.F | default(0) > 0 %}
🔴 **Critical Services:** {{ grade_distribution.F | default(0) }} services are failing quality standards and need immediate attention.
{% endif %}

{% if services | selectattr('coverage', '<', 0.7) | list | length > total_services * 0.3 %}
🟡 **Coverage Gaps:** {{ (services | selectattr('coverage', '<', 0.7) | list | length / total_services * 100) | format_number(1) }}% of services have inadequate test coverage.
{% endif %}

{% if services | selectattr('lint_pass', 'equalto', False) | list | length > 0 %}
🟠 **Code Quality Issues:** {{ services | selectattr('lint_pass', 'equalto', False) | list | length }} services have lint failures that should be addressed.
{% endif %}

## 📈 Quality Trends

### Recent Improvements
*This section would show quality score improvements over time.*

### Quality Velocity
- **Average Score Change (30d):** *TBD*
- **Services Improved (30d):** *TBD*
- **Services Degraded (30d):** *TBD*

## 🔧 Improvement Recommendations

### Immediate Actions (Next Sprint)
1. **Address Failing Services:** Prioritize {{ grade_distribution.F | default(0) }} failing services for quality improvements
2. **Fix Critical Vulnerabilities:** Resolve security issues in affected services
3. **Improve Test Coverage:** Focus on services below 70% coverage threshold

### Medium-term Goals (Next Quarter)
1. **Achieve 80% Average:** Target platform-wide average of 80+ quality score
2. **100% Security Compliance:** Ensure all services meet security requirements
3. **Consistent Coverage:** Standardize on 80%+ coverage across stable services

### Long-term Vision (Next Year)
1. **Quality Culture:** Embed quality practices in development workflow
2. **Automated Quality Gates:** Implement comprehensive CI/CD quality checks
3. **Continuous Improvement:** Establish regular quality review processes

## 📊 Quality Benchmarks

### Industry Standards
- **Test Coverage:** 80%+ (industry standard)
- **Security Vulnerabilities:** 0 critical (enterprise requirement)
- **Code Quality:** All lint checks passing (best practice)

### Platform Targets
- **Overall Score:** 85+ average
- **Grade Distribution:** 60% A/B grades, <5% failing
- **Security Posture:** 100% signed images, 0 critical vulnerabilities

---

*🤖 Generated by 254Carbon Meta Repository*
*Report ID: {{ generated_at[:19] }}*
