# 254Carbon Meta Repository - Upgrade Policies Configuration
#
# This file defines policies for automated upgrades, PR generation,
# and upgrade approval workflows.

# Auto-upgrade policies by upgrade type
auto_upgrade:
  # Patch version upgrades (e.g., 1.0.0 -> 1.0.1)
  patch:
    enabled: true
    require_tests: false
    require_review: false
    max_services_per_pr: 10
    description: "Automatic patch version upgrades for security fixes and bug fixes"

  # Minor version upgrades (e.g., 1.0.0 -> 1.1.0)
  minor:
    enabled: true
    require_tests: true
    require_review: false
    max_services_per_pr: 5
    description: "Automatic minor version upgrades for new features and enhancements"

  # Major version upgrades (e.g., 1.0.0 -> 2.0.0)
  major:
    enabled: false
    require_tests: true
    require_review: true
    max_services_per_pr: 1
    description: "Major version upgrades require manual review and testing"

# Service-specific upgrade policies
service_policies:
  # Critical path services (require extra caution)
  critical_services:
    - gateway
    - auth
    - metrics
    - aggregation

  # High-risk services (require review for all upgrades)
  high_risk_services:
    - projection
    - curve
    - backtesting

  # Experimental services (can auto-upgrade more aggressively)
  experimental_services:
    - scenario
    - enrichment

# Upgrade scheduling and batching
scheduling:
  # Maximum concurrent upgrade PRs
  max_concurrent_prs: 3

  # Delay between PR creations (minutes)
  pr_creation_delay: 5

  # Business hours for upgrades (24-hour format)
  business_hours:
    start: "09:00"
    end: "17:00"
    timezone: "UTC"

  # Days of week for scheduled upgrades (0=Sunday, 6=Saturday)
  allowed_days: [1, 2, 3, 4, 5]  # Monday-Friday

# PR template configuration
pr_templates:
  patch_upgrade:
    title: "🔧 Auto-upgrade: Patch {spec_name} to {new_version}"
    body: |
      ## Automatic Patch Upgrade

      This PR automatically upgrades `{spec_name}` from `{current_version}` to `{new_version}`.

      ### Changes
      - Patch version upgrade for security fixes and bug fixes
      - No breaking changes expected

      ### Validation
      - [x] Service manifest updated
      - [x] Specs lock file updated
      - [ ] Tests pass (auto-validated)

      ---
      *🤖 Generated by 254Carbon Meta*

  minor_upgrade:
    title: "⬆️ Auto-upgrade: Minor {spec_name} to {new_version}"
    body: |
      ## Automatic Minor Upgrade

      This PR automatically upgrades `{spec_name}` from `{current_version}` to `{new_version}`.

      ### Changes
      - Minor version upgrade with new features
      - Backward compatible changes

      ### Validation
      - [x] Service manifest updated
      - [x] Specs lock file updated
      - [x] Tests pass
      - [ ] Integration tests pass (auto-validated)

      ### Review Checklist
      - [ ] New features tested
      - [ ] Breaking change review completed

      ---
      *🤖 Generated by 254Carbon Meta*

  major_upgrade:
    title: "⚠️ Major Upgrade: {spec_name} to {new_version}"
    body: |
      ## Major Version Upgrade

      This PR upgrades `{spec_name}` from `{current_version}` to `{new_version}`.

      ### ⚠️ Breaking Changes Expected
      - Major version upgrade with breaking changes
      - Requires careful testing and review

      ### Validation Required
      - [x] Service manifest updated
      - [x] Specs lock file updated
      - [ ] Tests pass
      - [ ] Integration tests pass
      - [ ] Breaking change impact assessed

      ### Review Checklist
      - [ ] Breaking changes documented
      - [ ] Migration guide provided
      - [ ] Rollback plan defined
      - [ ] Consumer services updated

      ---
      *🤖 Generated by 254Carbon Meta*

# Review requirements by upgrade type
review_requirements:
  patch:
    required_reviewers: []
    optional_reviewers: ["platform-team"]
    min_approvals: 0

  minor:
    required_reviewers: []
    optional_reviewers: ["platform-team", "service-owners"]
    min_approvals: 0

  major:
    required_reviewers: ["architecture-team", "platform-team"]
    optional_reviewers: ["service-owners", "security-team"]
    min_approvals: 2

# Testing requirements for upgrades
testing_requirements:
  patch:
    run_unit_tests: true
    run_integration_tests: false
    run_e2e_tests: false
    require_test_coverage: false

  minor:
    run_unit_tests: true
    run_integration_tests: true
    run_e2e_tests: false
    require_test_coverage: true

  major:
    run_unit_tests: true
    run_integration_tests: true
    run_e2e_tests: true
    require_test_coverage: true

# Rollback policies
rollback:
  # Enable automatic rollback on failure
  auto_rollback: false

  # Rollback triggers
  triggers:
    test_failures: true
    deployment_failures: true
    health_check_failures: true

  # Rollback scope
  scope:
    single_service: true
    related_services: false
    entire_platform: false

# Notification settings
notifications:
  # Slack/Discord channels for upgrade notifications
  channels:
    auto_upgrades: "#platform-updates"
    manual_reviews: "#platform-reviews"
    failures: "#platform-alerts"

  # Email notifications
  email:
    auto_upgrades: false
    manual_reviews: true
    failures: true

# Risk assessment
risk_assessment:
  # Risk factors that increase upgrade risk
  risk_factors:
    high_coupling:
      threshold: 5        # Services with >5 dependencies
      risk_multiplier: 1.5

    recent_failures:
      window_days: 7      # Look back 7 days
      risk_multiplier: 1.3

    critical_service:
      risk_multiplier: 2.0

  # Risk score thresholds
  risk_thresholds:
    low: 1.0
    medium: 2.0
    high: 3.0

# Maintenance windows
maintenance_windows:
  # Define windows when upgrades should not be performed
  windows:
    - name: "Business Hours"
      cron: "0 9-17 * * 1-5"  # 9 AM to 5 PM, Monday-Friday
      timezone: "UTC"
      blocked_operations: ["major_upgrades"]

    - name: "Weekend"
      cron: "0 0 * * 0,6"     # Sundays and Saturdays
      timezone: "UTC"
      blocked_operations: ["all_upgrades"]

# Integration with external systems
integrations:
  # GitHub settings
  github:
    labels:
      auto_upgrade: "auto-upgrade"
      manual_review: "manual-review"
      breaking_change: "breaking-change"
      security_update: "security"

    assignees:
      auto_upgrades: ["254carbon-meta-bot"]
      manual_reviews: ["platform-team"]

  # CI/CD integration
  ci_cd:
    run_tests: true
    update_dependencies: true
    create_deployments: false
