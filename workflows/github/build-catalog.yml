name: Build Service Catalog

on:
  # Trigger after manifest ingestion
  workflow_run:
    workflows: ["Ingest Service Manifests"]
    types:
      - completed

  # Manual trigger
  workflow_dispatch:
    inputs:
      validate_only:
        description: 'Only validate, don''t save catalog'
        required: false
        default: false
        type: boolean
      force:
        description: 'Continue despite validation errors'
        required: false
        default: false
        type: boolean

  # Trigger on changes to catalog-related files
  push:
    branches: [ main ]
    paths: [ 'scripts/build_catalog.py', 'schemas/*.json', 'requirements.txt' ]

jobs:
  build-catalog:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}

    permissions:
      contents: write  # Need write to commit catalog files

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper operations

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download manifests (from previous workflow)
      if: github.event_name == 'workflow_run'
      uses: actions/github-script@v6
      with:
        script: |
          // Find the artifact from the ingest-manifests workflow
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{ github.event.workflow_run.id }}
          });

          const manifestArtifact = artifacts.data.artifacts.find(a => a.name.startsWith('service-manifests-'));

          if (manifestArtifact) {
            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: manifestArtifact.id,
              archive_format: 'zip'
            });

            // This would need additional setup to extract the zip
            // For now, we'll assume manifests are already present
            console.log('Manifest artifact found:', manifestArtifact.name);
          }

    - name: Build catalog
      run: |
        if [ "${{ github.event.inputs.validate_only }}" == "true" ]; then
          VALIDATE_FLAG="--validate-only"
        else
          VALIDATE_FLAG=""
        fi

        if [ "${{ github.event.inputs.force }}" == "true" ]; then
          FORCE_FLAG="--force"
        else
          FORCE_FLAG=""
        fi

        python scripts/build_catalog.py $VALIDATE_FLAG $FORCE_FLAG

    - name: Validate catalog
      run: |
        python scripts/validate_catalog.py --strict

    - name: Commit catalog files
      if: github.event.inputs.validate_only != 'true'
      run: |
        git config --local user.email "254carbon-meta@github-actions.com"
        git config --local user.name "254Carbon Meta Bot"

        # Check if there are changes to commit
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        git add catalog/
        git commit -m "ðŸ¤– Update service catalog

        Generated by GitHub Actions
        Workflow: ${{ github.workflow }}
        Run: ${{ github.run_id }}"

        git push

    - name: Upload catalog artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: catalog-${{ github.run_id }}
        path: |
          catalog/
          manifests/collection.log
          catalog/build.log
          catalog/validation.log
        retention-days: 30

    - name: Comment PR (if triggered by PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Service catalog has been built and validated.'
          })
