name: Drift Detection

on:
  # Nightly run at 1 AM UTC
  schedule:
    - cron: '0 1 * * *'

  # Manual trigger for immediate drift check
  workflow_dispatch:
    inputs:
      create_issues:
        description: 'Create GitHub issues for high-severity drift'
        required: false
        default: true
        type: boolean
      comment_prs:
        description: 'Comment on PRs with drift status'
        required: false
        default: true
        type: boolean

  # Trigger after catalog updates
  workflow_run:
    workflows: ["Build Service Catalog", "Quality Metrics Aggregation"]
    types:
      - completed

jobs:
  detect-drift:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for trend analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Detect drift issues
      run: |
        python scripts/detect_drift.py

    - name: Upload drift report
      uses: actions/upload-artifact@v3
      with:
        name: drift-report-${{ github.run_id }}
        path: |
          catalog/latest_drift_report.json
          analysis/reports/drift.log
        retention-days: 30

    - name: Generate drift summary
      run: |
        python scripts/render_report.py \
          --report-type drift \
          --input-file catalog/latest_drift_report.json \
          --output-file drift-summary.md

    - name: Create issues for high-severity drift
      if: github.event.inputs.create_issues == 'true' || github.event_name == 'schedule'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/create_drift_issues.py

    - name: Comment on recent PRs with drift changes
      if: github.event.inputs.comment_prs == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/comment_drift_changes.py

    - name: Archive drift data
      run: |
        # Move current drift report to historical data
        mkdir -p analysis/historical/drift
        timestamp=$(date +%Y%m%d_%H%M%S)
        cp catalog/latest_drift_report.json "analysis/historical/drift/drift_${timestamp}.json"

    - name: Commit drift updates
      run: |
        git config --local user.email "254carbon-meta@github-actions.com"
        git config --local user.name "254Carbon Meta Bot"

        # Check if there are drift-related changes
        if git diff --quiet catalog/latest_drift_report.json analysis/reports/drift/; then
          echo "No drift changes to commit"
          exit 0
        fi

        git add catalog/latest_drift_report.json analysis/reports/drift/
        git commit -m "ðŸ¤– Update drift detection results

        Automated drift analysis
        Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        Run: ${{ github.run_id }}"

        git push

  drift-summary:
    runs-on: ubuntu-latest
    needs: detect-drift
    if: github.event_name == 'schedule' || github.event.inputs.comment_prs == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download drift report
      uses: actions/download-artifact@v3
      with:
        name: drift-report-${{ github.run_id }}
        path: temp/

    - name: Generate executive summary
      run: |
        # Create a concise summary for notifications
        python scripts/generate_drift_summary.py > drift-executive-summary.md

    - name: Upload drift summary
      uses: actions/upload-artifact@v3
      with:
        name: drift-summary-${{ github.run_id }}
        path: drift-executive-summary.md
        retention-days: 7

    - name: Post to Slack/Discord (if configured)
      if: env.SLACK_WEBHOOK != '' || env.DISCORD_WEBHOOK != ''
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        python scripts/post_drift_summary.py
