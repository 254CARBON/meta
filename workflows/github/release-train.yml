name: Release Train Orchestration

on:
  # Manual trigger for coordinated releases
  workflow_dispatch:
    inputs:
      train_name:
        description: 'Release train name to execute'
        required: true
        type: choice
        options:
          - Q4-curve-upgrade
          - Q1-security-patches
          - Q2-performance-improvements
          - Q3-new-features
      dry_run:
        description: 'Run validation only (no actual releases)'
        required: false
        default: false
        type: boolean
      force_execute:
        description: 'Execute even if some validations fail'
        required: false
        default: false
        type: boolean

  # Trigger after release train planning
  workflow_run:
    workflows: ["Release Train Planning"]
    types:
      - completed

jobs:
  validate-release-train:
    runs-on: ubuntu-latest
    if: github.event.inputs.train_name != ''

    outputs:
      validation_passed: ${{ steps.validation.outputs.passed }}
      train_config: ${{ steps.validation.outputs.train_config }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate release train
      id: validation
      run: |
        # Validate the specified release train
        python scripts/validate_release_train.py \
          --train ${{ github.event.inputs.train_name }} \
          --output-format json > validation-result.json

        # Check if validation passed
        if jq -e '.validation.overall_passed' validation-result.json > /dev/null; then
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "passed=false" >> $GITHUB_OUTPUT
        fi

        # Save train config for next job
        jq '.train' validation-result.json > train-config.json
        echo "train_config=$(cat train-config.json)" >> $GITHUB_OUTPUT

    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: release-validation-${{ github.run_id }}
        path: validation-result.json
        retention-days: 30

    - name: Comment validation results
      if: always()
      run: |
        # Post validation results as comment
        python scripts/comment_release_validation.py \
          --train ${{ github.event.inputs.train_name }} \
          --validation-file validation-result.json

    - name: Fail if validation failed and not forced
      if: steps.validation.outputs.passed == 'false' && github.event.inputs.force_execute != 'true'
      run: |
        echo "Release train validation failed. Set force_execute=true to proceed anyway."
        exit 1

  execute-release-train:
    runs-on: ubuntu-latest
    needs: validate-release-train
    if: needs.validate-release-train.outputs.validation_passed == 'true' || github.event.inputs.force_execute == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Execute release train
      if: github.event.inputs.dry_run != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/execute_release_train.py \
          --train ${{ github.event.inputs.train_name }} \
          --train-config "${{ needs.validate-release-train.outputs.train_config }}"

    - name: Simulate execution (dry run)
      if: github.event.inputs.dry_run == 'true'
      run: |
        python scripts/execute_release_train.py \
          --train ${{ github.event.inputs.train_name }} \
          --train-config "${{ needs.validate-release-train.outputs.train_config }}" \
          --dry-run

    - name: Upload execution report
      uses: actions/upload-artifact@v3
      with:
        name: release-execution-${{ github.run_id }}
        path: |
          analysis/reports/release-trains/
          catalog/release-trains.yaml
        retention-days: 90

    - name: Update release train status
      if: github.event.inputs.dry_run != 'true'
      run: |
        python scripts/update_release_train_status.py \
          --train ${{ github.event.inputs.train_name }} \
          --status completed

  release-notification:
    runs-on: ubuntu-latest
    needs: [validate-release-train, execute-release-train]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate release summary
      run: |
        python scripts/generate_release_summary.py \
          --train ${{ github.event.inputs.train_name }} > release-summary.md

    - name: Send notifications
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        python scripts/send_release_notifications.py \
          --train ${{ github.event.inputs.train_name }} \
          --summary-file release-summary.md

    - name: Archive release data
      run: |
        # Archive release artifacts for historical tracking
        mkdir -p analysis/historical/releases
        timestamp=$(date +%Y%m%d_%H%M%S)
        cp release-summary.md "analysis/historical/releases/${{ github.event.inputs.train_name }}_${timestamp}_summary.md"
